services:
  db:
    image: postgres:15
    container_name: finx-db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10
    security_opt:
      - no-new-privileges:true
    user: postgres
    networks:
      - finx-net

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: finx-backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DB_HOST: finx-db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: production
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./config:/app/config:ro
    security_opt:
      - no-new-privileges:true
    user: finx
    networks:
      - finx-net

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    container_name: finx-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    security_opt:
      - no-new-privileges:true
    networks:
      - finx-net

volumes:
  postgres_data:

networks:
  finx-net:
    driver: bridge
